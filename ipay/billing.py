from utils import parse_data, send_request, get_hash

BILLING_ENDPOINT = 'https://apis.ipayafrica.com/ipay-billing/'


class Billing:
    def __init__(self, security_key, vendor_id):
        self.security_key = security_key
        self.vendor_id = vendor_id

    def get_phone_operator(self, phone_number: str):
        """ get the operator of the mobile number to let us know where we are sending
        them money.
        Arguments:
            phone_number - phone number to be checked the format is 2547xx xxx xxx

        """
        if phone_number.startswith("+"):
            phone_number = phone_number[1:]
        assert phone_number.startswith("254")
        phone_prefix = phone_number[3:6]
        param_dict = {
            "vid": self.vendor_id,
            "prefix": phone_prefix,
        }
        # return with hashed key as required by the documentation
        parameters = {
            'hash': get_hash(parse_data(param_dict), self.security_key),
            **param_dict
        }
        response = send_request(
            data=parameters,
            url=f"{BILLING_ENDPOINT}billing/phone/lookup"
        )
        return response

    def get_account_balance(self):
        """ Get the account balance of us the merchant """
        param_dict = {
            "vid": self.vendor_id
        }
        # return with hashed key as required by the documentation
        parameters = {
            'hash': get_hash(parse_data(param_dict), self.security_key),
            **param_dict
        }
        response = send_request(
            data=parameters,
            url=f"{BILLING_ENDPOINT}billing/account/balance",
            method="GET"
        )
        return response

    def validate_account(self, account, biller_code, phone=None):
        """ Get the account balance of us the merchant
        Arguments:
            account - The account number in question.
            biller_code - This is the biller name of the account number being queried eg kplc_postpaid or kplc_prepaid
        """
        param_dict = {
            "vid": self.vendor_id,
            "account": account,
            "account_type": biller_code
        }
        if phone:
            param_dict["secondary_account"] = phone
        # return with hashed key as required by the documentation
        parameters = {
            'hash': get_hash(parse_data(param_dict), self.security_key),
            **param_dict
        }
        response = send_request(
            data=parameters,
            url=f"{BILLING_ENDPOINT}billing/validate/account"
        )
        return response

    def get_billing_status(self, biller_code):
        """ Get the account balance of us the merchant """
        param_dict = {
            "vid": self.vendor_id,
            "biller_code": biller_code
        }
        # return with hashed key as required by the documentation
        parameters = {
            'hash': get_hash(parse_data(param_dict), self.security_key),
            **param_dict
        }
        response = send_request(
            data=parameters,
            url=f"{BILLING_ENDPOINT}billing/biller/status",
            method="GET"
        )
        return response

    def get_billing_list(self):
        response = send_request(
            data={"vid": self.vendor_id},
            url=f"{BILLING_ENDPOINT}billing/list",
            method="GET"
        )
        return response

    def create_billing_transaction(self, biller_code, amount, account, transaction_id, phone=None):
        """ Make a billing Transacttion
        Arguments:
            biller_code - This is the biller name of the account number being queried eg kplc_postpaid or kplc_prepaid
            amount - Amount of money to be paid
            account - The account number of the customer
            transaction_id -  the unique reference generated by the merchant
            phone - some need phone number for additional verification
        """
        param_dict = {
            "vid": self.vendor_id,
            "biller_code": biller_code,
            "amount": amount,
            "account": account,
            "merchant_reference": transaction_id,
        }
        if phone:
            param_dict["phone"] = phone
        # return with hashed key as required by the documentation
        parameters = {
            'hash': get_hash(parse_data(param_dict), self.security_key),
            **param_dict
        }
        response = send_request(
            data=parameters,
            url=f"{BILLING_ENDPOINT}transaction/create"
        )
        return response
